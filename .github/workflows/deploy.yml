name: Deploy ML App
on:
  push:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Pushed images: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG and $ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Clean up old ECR images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          # Get list of all image digests except the latest
          IMAGE_DIGESTS=$(aws ecr describe-images \
            --repository-name ${{ secrets.ECR_REPOSITORY }} \
            --region ${{ secrets.AWS_REGION }} \
            --query 'imageDetails[?imageTags[?@!=`latest`]].imageDigest' \
            --output text)
          
          # Delete old images
          if [ ! -z "$IMAGE_DIGESTS" ]; then
            for DIGEST in $IMAGE_DIGESTS; do
              aws ecr batch-delete-image \
                --repository-name ${{ secrets.ECR_REPOSITORY }} \
                --region ${{ secrets.AWS_REGION }} \
                --image-ids imageDigest=$DIGEST || { echo "Failed to delete image $DIGEST"; exit 1; }
            done
            echo "Deleted old tagged images (except 'latest') from ECR"
          else
            echo "No old tagged images to delete"
          fi

      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
            --targets "Key=instanceids,Values=${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy extroverts_ml_predictor container to EC2" \
            --parameters '{
              "commands": [
                "echo \"Logging in to ECR...\"",
                "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }} || { echo \"ECR login failed\"; exit 1; }",
                "echo \"Pulling image...\"",
                "docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest || { echo \"Docker pull failed\"; exit 1; }",
                "echo \"Stopping existing container...\"",
                "docker stop extroverts_ml_predictor || true",
                "docker rm extroverts_ml_predictor || true",
                "echo \"Running new container...\"",
                "docker run -d --name extroverts_ml_predictor -p 80:80 ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest || { echo \"Docker run failed\"; exit 1; }"
              ]
            }' \
            --timeout-seconds 7200 \
            --cloud-watch-output-config '{"CloudWatchOutputEnabled": true, "CloudWatchLogGroupName": "/aws/ssm/extroverts"}' \
            --region ${{ secrets.AWS_REGION }} \
            --output text
          echo "SSM command sent. Check AWS Console or CloudWatch Logs (/aws/ssm/extroverts) for execution status."
